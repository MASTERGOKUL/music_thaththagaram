import streamlit as st
import pandas as pd

# ===========================================      required characters   ==============================
kuril_eluthu = ['роЕ', 'роЗ', 'роЙ', 'роО', 'роТ', 'роХ', 'роЩ', 'роЪ', 'роЮ', 'роЯ', 'рог', 'род', 'рои', 'рок', 'роо', 'роп', 'ро░', 'ро▓', 'ро╡', 'ро┤', 'ро│',
                'ро▒', 'рой']
uyir_mei_eluthu = ['ро┐', 'рпБ', 'рпЖ', 'рпК']
alagu = {'1': "роирпЗро░рпН", "0": "роирпЗро░рпН", "10": "роирпЗро░рпН ", "11": "роиро┐ро░рпИ ", "110": "роиро┐ро░рпИ"}
mei_eluthu = ['роХрпН', 'роЩрпН', 'роЪрпН', 'роЮрпН', 'роЯрпН', 'рогрпН', 'родрпН', 'роирпН', 'рокрпН', 'роорпН', 'ропрпН', 'ро░рпН', 'ро▓рпН', 'ро╡рпН', 'ро┤рпН', 'ро│рпН', 'ро▒рпН',
              'ройрпН']
thaalam = {"родрпЗрооро╛": "родро╛родрпАроорпН", "рокрпБро│ро┐рооро╛": "родроХродрпАроорпН", "роХрпВро╡ро┐ро│роорпН": "родро╛родро┐рооро┐", "роХро░рпБро╡ро┐ро│роорпН": "родроХродро┐рооро┐",
           "роХрпВро╡ро┐ро│роЩрпНроХро╛ропрпН": "родро╛родро┐рооро┐родро╛", "роХро░рпБро╡ро┐ро│роЩрпНроХро╛ропрпН": "родроХродро┐рооро┐родро╛", "роХрпВро╡ро┐ро│роЩрпНроХройро┐": "родро╛родро┐рооро┐родроХ", "роХро░рпБро╡ро┐ро│роЩрпНроХройро┐": "родроХродро┐рооро┐родроХ",
           "родрпЗрооро╛роЩрпНроХро╛ропрпН": "родро╛родрпАроорпНродро╛", "рокрпБро│ро┐рооро╛роЩрпНроХро╛ропрпН": "родроХродрпАроорпНродрпАроорпН", "родрпЗрооро╛роЩрпНроХройро┐": "родро╛родрпАроорпНродроХ", "рокрпБро│ро┐рооро╛роЩрпНроХройро┐": "родроХродрпАроорпНродроХ"}


# ===============================================  functions  of alagidutha   ==========================================


# split the words where it has 'роорпЖропрпНропрпЖро┤рпБродрпНродрпБроХрпНроХро│рпН'
def split_mei(word):
    seer, start = [], 0
    # iterates the word using index
    for index in range(len(word)):
        if word[index] == "рпН":
            seer.append(word[start:index - 1])
            start = index + 1
        #  to add last 'роЪрпАро░рпН'  if it does not end with 'роорпЖропрпНропрпЖро┤рпБродрпНродрпБроХрпНроХро│рпН'
        if index == len(word) - 1:
            for i in word[start:]:
                if i not in mei_eluthu:
                    seer.append(word[start:])
                    break
    return seer


# to identify letters as kuril or nedil
def is_kuril(letter):
    return letter in kuril_eluthu


def is_uyir_mei(letter):
    return letter in uyir_mei_eluthu


# this function simplifies kuril as '1' and nedil as '0'
def simplify(asai):
    index = 0
    for seer in asai:
        seer_index = 0
        for letter in seer:
            n = ""
            letter_index = 0
            for char in letter:
                if is_kuril(char) and (len(letter) < 1 or not is_uyir_mei(asai[index][seer_index][letter_index])):
                    n += "1"
                elif is_uyir_mei(char):
                    pass
                else:
                    n += "0"
                letter_index += 1
            asai[index][seer_index] = n
            seer_index += 1
        index += 1
    return asai


def print_alagu(seer):
    table = []
    if len(seer) > 1 and seer[0] != "1":
        table.append(alagu[seer[0]])
        table.append(print_alagu(seer[1:]))
    elif (len(seer) > 2) and seer[2] != "0":
        table.append(alagu[seer[:2]])
        table.append(print_alagu(seer[2:]))
    elif (len(seer) > 2) and seer[2] == "1":
        table.append(alagu[seer[:2]])
        table.append(print_alagu(seer[2:]))
    else:
        table.append(alagu[seer])
    return table


def seer_asai(seer):
    result = []
    for index in seer:
        value = []
        for sr in index:
            if sr!='':
                value.append(print_alagu(sr))
        result.append(value)
    return result

def res_vaipadu(i):
    s = ""
    if isinstance(i, list):
        for j in i:
            if s == "":
                s += res_vaipadu(j)
            else:
                s += " " + res_vaipadu(j)
    else:
        if s == "":
            s = "".join(i).rstrip()
        else:
            s = s + " " + ("".join(i).rstrip())
    return s


def paa_vagai(Lines, linenum):
    # eetrasai=Lines[-1].split(" ")[-1][-1 : -3]
    # bool = eetrasai =='ропрпН' or eetrasai not in kuril_eluthu and eetrasai not in uyir_mei_eluthu
    if linenum > 2:
        s, ind = [], 0
        for i in Lines:
            s.append(len(Lines[ind].split(" ")))
            ind += 1
        if s[0] + s[-1] == 8 and s[-2] < 4:
            if s == [4] * linenum:
                return "роиро┐ро▓рпИроорогрпНроЯро┐ро▓ роЖроЪро┐ро░ро┐ропрокрпНрокро╛"
            elif s[-3] < 4:
                return "роЗрогрпИроХрпНроХрпБро▒ро│рпН роЖроЪро┐ро░ро┐ропрокрпНрокро╛"
            else:
                return "роирпЗро░ро┐роЪрпИ роЖроЪро┐ро░ро┐ропрокрпНрокро╛"
    else:
        return "роХрпБро▒ро│рпН ро╡рпЖрогрпНрокро╛"


lineNum = 0
lines = []


def lineExtraction(string):
    paatuLines = string.split("\n")
    for sol in paatuLines:
        if sol.strip() != "":
            lines.append(sol.strip())
    return lines


# ===========================================      execution code      ===========================================
# to change the title and icon

st.set_page_config(page_title="родрооро┐ро┤рпН Music", page_icon=":notes", layout="wide", initial_sidebar_state="collapsed")
st.title("ЁЯкШродродрпНродроХро╛ро░роорпН")  # like h1 tag
# to add background image

st.markdown(
    """
    <style>
    table{
    margin-top:20px;
    }
      th{
      text-align:center !important;
      color:#fff !important;
            background-color: #f99;
        }
    *::selection{
    color:#fff;
    background-color:rgb(49, 51, 63);
    }
     .stApp {
     background-image: url('assets/mummy_background_image.png') ;
     background-size: cover;
     background-position:center;
 }
    a[href="//streamlit.io"]{
    display:none;
    }
    footer::after {
    content: " тЭд by GOKUL " !important;
    }
    footer{
    user-select:none;
    }
    header{
    display:none !important;
    }
    .block-container{
    width:80%;
    }
    .css-10trblm{
    text-align:center !important;
    }
    </style>
    """,
    unsafe_allow_html=True
)
col1, col2 = st.columns([0.5, 0.5])

# with col1:
sentence = st.text_area('Enter Your Text', '''''')
btn = st.button('Enter')
# split the sentence into a list of words

alagiduvaipadu = {}
table_show = {"роЪрпКро▓рпН": [], "роЪрпАро░рпН": [], "роЕроЪрпИ": [], "родро╛ро│роЪрпКро▒рпНроХроЯрпНроЯрпБ": []}
# with col2:
flag = False
for line in (sentence.split("\n")):
    words = line.split(" ")
    seers = list(map(split_mei, words))
    simplify(seers)
    #  to list 'роЪрпАро░рпН' without 'роорпЖропрпНропрпЖро┤рпБродрпНродрпБроХрпНроХро│рпН'
    vaipadu = seer_asai(seers)
    ans = []
    for i in vaipadu:
        s = res_vaipadu(i)
        ans.append(s)
    seer_vaipadu = {"роирпЗро░рпН": "роиро╛ро│рпН",
                    "роиро┐ро░рпИ": "рооро▓ро░рпН",
                    "роирпЗро░рпН роирпЗро░рпН": "родрпЗрооро╛",
                    "роиро┐ро░рпИ роирпЗро░рпН": "рокрпБро│ро┐рооро╛",
                    "роиро┐ро░рпИ роиро┐ро░рпИ": "роХро░рпБро╡ро┐ро│роорпН",
                    "роирпЗро░рпН роиро┐ро░рпИ": "роХрпВро╡ро┐ро│роорпН",
                    "роирпЗро░рпН роирпЗро░рпН роирпЗро░рпН": "родрпЗрооро╛роЩрпНроХро╛ропрпН",
                    "роиро┐ро░рпИ роирпЗро░рпН роирпЗро░рпН": "рокрпБро│ро┐рооро╛роЩрпНроХро╛ропрпН",
                    "роиро┐ро░рпИ роиро┐ро░рпИ роирпЗро░рпН": "роХро░рпБро╡ро┐ро│роЩрпНроХро╛ропрпН",
                    "роирпЗро░рпН роиро┐ро░рпИ роирпЗро░рпН": "роХрпВро╡ро┐ро│роЩрпНроХро╛ропрпН"}
    temp = {}
    temp_table = []
    a = 0
    for i in ans:
        if i != "":
            flag = True
            temp[words[a]] = {i: seer_vaipadu[i]}
            table_show["роЪрпКро▓рпН"].append(words[a])
            table_show["роЪрпАро░рпН"].append(i)
            table_show["роЕроЪрпИ"].append(seer_vaipadu[i])
            table_show["родро╛ро│роЪрпКро▒рпНроХроЯрпНроЯрпБ"].append(thaalam[seer_vaipadu[i]])
            a = a + 1
    alagiduvaipadu[line] = temp
df = pd.DataFrame(table_show)
df.index = range(1, len(df) + 1)

if flag and btn:
    lineExtraction(sentence)
    paa = paa_vagai(lines, len(lines))
    st.subheader(" рокро╛ ро╡роХрпИ : "+paa)
    st.table(df)
